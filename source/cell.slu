var cellDoorOpen = FALSE;

sub cellRoom()
{    
    #addOverlay ('data/act1.png', 0, 0);
    #pause (50);

    addOverlay ('data/cell.png', 0, 0);
    
    setFloor ('data/cell4.flo');
    
    setZBuffer ('data/cell2.zbu');
    
    messShowInventory ();
    
    addCharacter (cellDoor, 46, 27, cellDoorClosedStill() );
    
    addCharacter (cellLight, 49, 19, cellLightRed() );
    
    addCharacter (bowlOnFloor, 65, 37, bowlStill() );
    
    setCharacterExtra (cellLight, NOZBUFFER);
    
    addScreenRegion (cellHole, 92, 23, 100, 31, 93, 34, EAST);

    addCharacter(ego, 90, 47, egoAnim() );    

    messShow ();

    say (ego, "I must get out of here!");

    messResume ();    
    
}

#             _ _       _                  
#     ___ ___| | |   __| | ___   ___  _ __ 
#    / __/ _ \ | |  / _` |/ _ \ / _ \| '__|
#   | (_|  __/ | | | (_| | (_) | (_) | |   
#    \___\___|_|_|  \__,_|\___/ \___/|_|   

objectType cellDoor ("Cell Door")
{
    event lookAt
    {
        say (ego, "I am locked in this cell.");
    }
}

sub openCellDoor ()
{
    if (cellDoorOpen == FALSE)
    {
        cellDoorOpen = TRUE;
        messBusy ();
        
        # green light
        setCostume (cellLight, cellLightGreen() );
        playSound ('data/unlock.wav');
        pause (10);
        
        # face the door
        moveCharacter (ego, 90, 47);
        turnCharacter (ego, WEST);
        pause (10);
        
        # open door
        playSound ('data/celldooropen.wav');
        pause( animate (cellDoor, cellDoorOpenAnim() ) );
        setCostume (cellDoor, cellDoorOpenStill() );
        setFloor ('data/cell3.flo');
        
        # enter guard
        addCharacter (guard, 29, 44, guardAnim() );
        moveCharacter (guard, 53, 44);
        moveCharacter (guard, 48, 53);
        turnCharacter (guard, EAST);
        
        # enter second guard
        addCharacter (otherGuard, 29, 44, guardAnim() );
        moveCharacter (otherGuard, 53, 44);
        moveCharacter (otherGuard, 62, 38);
        turnCharacter (otherGuard, EAST);
        
        say (guard, "MONSTER!");
        say (otherGuard, "TIME FOR THE TESTS, MONSTER!");
        say (guard, "MOVE IT!");
     
        addScreenRegion (cellExit, 0, 32, 32, 55, 0, 0, WEST);

        messResume ();
    }
}


sub closeCellDoor ()
{
    if (cellDoorOpen == TRUE)
    {
        cellDoorOpen = FALSE;
        messBusy ();
        
        # close door
        playSound ('data/celldooropen.wav');
        pause( animate (cellDoor, cellDoorCloseAnim() ) );
        setCostume (cellDoor, cellDoorClosedStill() );

        # red light
        setCostume (cellLight, cellLightRed() );
        playSound ('data/unlock.wav');
        pause (10);
    }
}

sub cellDoorClosedStill ()
{
    return anim ('data/cell-door.duc', 0);
}

sub cellDoorOpenStill ()
{
    return anim ('data/cell-door.duc', 21);
}

sub cellDoorOpenAnim ()
{
    return anim ('data/cell-door.duc',
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
        10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
        20, 21
    );
}

sub cellDoorCloseAnim ()
{
    return anim ('data/cell-door.duc',
        21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 
        10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0
    );
}

#    _ _       _     _   
#   | (_) __ _| |__ | |_ 
#   | | |/ _` | '_ \| __|
#   | | | (_| | | | | |_ 
#   |_|_|\__, |_| |_|\__|
#        |___/           

objectType cellLight ("Light")
{

}

sub cellLightRed ()
{
    return anim ('data/cell-light.duc', 0);
}

sub cellLightGreen ()
{
    return anim ('data/cell-light.duc', 1);
}

#    _                   _    ___                                 
#   | |__   _____      _| |  ( _ )    ___ _ __   ___   ___  _ __  
#   | '_ \ / _ \ \ /\ / / |  / _ \/\ / __| '_ \ / _ \ / _ \| '_ \ 
#   | |_) | (_) \ V  V /| | | (_>  < \__ \ |_) | (_) | (_) | | | |
#   |_.__/ \___/ \_/\_/ |_|  \___/\/ |___/ .__/ \___/ \___/|_| |_|
#                                        |_|                      

objectType bowlOnFloor ("A Bowl")
{
    event takeIt
    {
        if (cellDoorOpen)
        {
            say (otherGuard, "Leave it!");
            return;
        }
        
        moveToCharacter (ego, bowlOnFloor);
        messTake (bowlInventory);
        messTake (spoonInventory);
        removeCharacter (bowlOnFloor);
    }
}

sub bowlStill ()
{
    return anim('data/bowl.duc', 0);
}

objectType bowlInventory ("Empty Bowl")
{
    event getIcon
    {
        InventoryIcon = anim('data/bowl.duc', 1);
    }
}

objectType spoonInventory ("The Spoon")
{
    event getIcon
    {
        InventoryIcon = anim('data/bowl.duc', 2);
    }
}


#    _           _      
#   | |__   ___ | | ___ 
#   | '_ \ / _ \| |/ _ \
#   | | | | (_) | |  __/
#   |_| |_|\___/|_|\___|

objectType cellHole ("Hole")
{
    event lookAt
    {
        if (cellDoorOpen)
        {
            say (otherGuard, "Leave it!");
            return;
        }
        
        messBusy ();
        say (ego, "This hole is not very deep.");
        messResume ();
    }
    
    event spoonInventory
    {
        if (cellDoorOpen)
        {
            say (otherGuard, "Leave it!");
            return;
        }
        
        messBusy ();
        animate (ego, egoSpoonDigAnim() );
        addCharacter (cementDust, 97, 34, cementDustStill() );
        setCharacterExtra (cementDust, RECTANGULAR);
        pause ( animate (cementDust, cementDustFallAnim() ) );
        setCostume (cementDust, cementDustStill() );
        normalCharacter (ego);
        messResume ();
    }
}


#        _           _   
#     __| |_   _ ___| |_ 
#    / _` | | | / __| __|
#   | (_| | |_| \__ \ |_ 
#    \__,_|\__,_|___/\__|

sub throwDustIntoEyes ()
{
    messBusy ();
    
    # throw dust
    pause (animate (ego, egoThrowDustAnim () ));
    normalCharacter (ego);
    
    # guard rubs eyes
    var delay = animate (guard, guardRubEyesAnim () );
    #animate (ego, egoShiftToGuardAnim() );
    egoShiftToGuard ();
    
    # move other guard closer
    moveCharacter (otherGuard, 56, 45);
    
    # shape shift
    egoShape = "GUARD";
    setCostume (ego, guardAnim() );
    moveCharacter (ego, 66, 45);
    turnCharacter (ego, SOUTH);
    
    # guard looks up
    normalCharacter (guard);
    
    pause (10);
    say (guard, "OH CRAP...");

    say (otherGuard, "IT'S HIM! HE'S THE MONSTER!");
    say (ego, "NO, HE IS THE MONSTER!");
    say (otherGuard, "NO! I AM A GUARD!");
    say (ego, "I AM A GUARD!");
    say (guard, "ONE OF YOU IS THE MONSTER...");
    say (guard, "LUCKILY WE HAVE DEVISED A QUESTION IF THIS EVER HAPPENED!");
    say (guard, "YOU!...");
    
    say (ego, "ME?");
    say (guard, "YES YOU... WHAT DOES 5, 7, 11 AND 13 HAVE IN COMMON?");
    say (ego, "THEY ARE ALL... UM... NUMBERS?");
    say (guard, "CORRECT! THAT MEANS THE OTHER ONE IS THE MONSTER!");
    say (otherGuard, "NO! I AM THE REAL GUARD!");
    say (guard, "EXACTLY WHAT A MONSTER WOULD SAY!");

    # (walks up to other guard)
    moveCharacter (guard,  50, 45);
    turnCharacter (guard, EAST);
    say (guard, "MOVE IT!");
    
    # (PUTS HANDS UP)
    turnCharacter (otherGuard, EAST);
    setCostume (otherGuard, guardHandsUpAnim() );
    moveCharacter (otherGuard, 85, 46);
    moveCharacter (guard, 68, 46);
    turnCharacter (otherGuard, WEST);
    
    # move ego around
    moveCharacter (ego, 47, 44);
    turnCharacter (ego, EAST);
    
    say (otherGuard, "YOU'RE MAKING A MISTAKE!");
    say (ego, "I DON'T THINK SO! LOCK THAT MONSTER AWAY, GUARD!");
    say (guard, "MY PLEASURE!");
#        (GUARD ONE WALKS GUARD TWO THROUGH THE CELL DOOR. IT CLANKS CLOSED.)
#        (WALKS BACK TO YOU)
    say (guard, "GO TELL THE SCIENTISTS OF THIS INCIDENT.");
    say (ego, "RIGHT.");
    
    messResume ();
}

objectType cementDust ("Cement Dust")
{
    event takeIt
    {
        messBusy ();
        messTake (cementDust);
        say(ego, "This dust can blind eyeballs for a short time.");
        openCellDoor ();
    }
    
    event getIcon
    {
        InventoryIcon = anim('data/dust.duc', 12);
    }
}

sub cementDustFallAnim ()
{
    var t = 6;
    return anim('data/dust.duc',
        wait(0, t), wait(1, t), wait(2, t), wait(3, t), 
        wait(4, t), wait(5, t), wait(6, t), wait(7, t),
        wait(8, t), wait(9, t), wait(10, t), wait(11, t),
        wait(12, t)
    );
}

sub cementDustStill ()
{
    return anim('data/dust.duc', 12);
}


#               _ _   
#      _____  _(_) |_ 
#     / _ \ \/ / | __|
#    |  __/>  <| | |_ 
#     \___/_/\_\_|\__|

objectType cellExit ("Exit")
{
    event default
    {
        # if we are not shaped to a guard, we can't escape
        if (egoShape == "EGO")
        {
            moveCharacter (guard, 0, 46);
            moveCharacter (ego, 0, 46);
            moveCharacter (otherGuard, 0, 46);
            closeCellDoor ();
            messWarp (failedRoom);
            return;
        }
        else
        {
            moveCharacter (ego, 0, 46);
            moveCharacter (guard, 0, 46);
            closeCellDoor ();
            say (otherGuard, "CRAP.");
            pause (50);
            messWarp (hallway);
        }
    }
}
